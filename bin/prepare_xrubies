#!/usr/bin/env bash

set -e
source "$HOME/.rvm/scripts/rvm"

# Avoid running all the tasks over and over
mkdir -p "$HOME/.rake-compiler"
if [ -f "$HOME/.rake-compiler/.prepared" ]; then
  exit 0
fi

# shared directory between VM and host
cd '/vagrant'

# Install rake-compiler in all Rubies
rvm all do gem install rake-compiler

# Use just one CPU for building Rubies
export MAKE="make"

# Build 1.8.7 with mingw32 compiler (GCC 4.2)
rvm use 1.8.7
rake-compiler cross-ruby VERSION=1.8.7-p374 HOST=i586-mingw32msvc

# Build 1.9.3 using 1.9.3 as base
rvm use 1.9.3
rake-compiler cross-ruby VERSION=1.9.3-p551 HOST=i586-mingw32msvc

# Build Ruby 2.0+ using 2.5.1 as base
rvm use 2.5.1

# Build Ruby 2.0.0 and x64 Ruby 2.0.0
rake-compiler cross-ruby VERSION=2.0.0-p648 HOST=i686-w64-mingw32 debugflags="-g"
rake-compiler cross-ruby VERSION=2.0.0-p648 HOST=x86_64-w64-mingw32 debugflags="-g"

# Build Ruby 2.1 and x64 Ruby 2.1
rake-compiler cross-ruby VERSION=2.1.8 HOST=i686-w64-mingw32 debugflags="-g"
rake-compiler cross-ruby VERSION=2.1.8 HOST=x86_64-w64-mingw32 debugflags="-g"

# Build Ruby 2.2 and x64 Ruby 2.2
rake-compiler cross-ruby VERSION=2.2.4 HOST=i686-w64-mingw32 debugflags="-g"
rake-compiler cross-ruby VERSION=2.2.4 HOST=x86_64-w64-mingw32 debugflags="-g"

# Build Ruby 2.3 and x64 Ruby 2.3
rake-compiler cross-ruby VERSION=2.3.3 HOST=i686-w64-mingw32 debugflags="-g"
rake-compiler cross-ruby VERSION=2.3.3 HOST=x86_64-w64-mingw32 debugflags="-g"

# Build Ruby 2.4 and x64 Ruby 2.4
rake-compiler cross-ruby VERSION=2.4.4 HOST=i686-w64-mingw32 debugflags="-g"
rake-compiler cross-ruby VERSION=2.4.4 HOST=x86_64-w64-mingw32 debugflags="-g"

# Build Ruby 2.5 and x64 Ruby 2.5
rake-compiler cross-ruby VERSION=2.5.1 HOST=i686-w64-mingw32 debugflags="-g"
rake-compiler cross-ruby VERSION=2.5.1 HOST=x86_64-w64-mingw32 debugflags="-g"

# Mark installation prepared and don't run all this again
touch "$HOME/.rake-compiler/.prepared"
